<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bcvm="clr-namespace:HealthTracker.BaseClasses.ViewModels;assembly=HealthTracker.BaseClasses">

  <SolidColorBrush x:Key="WindowBackgroudBrush"
                   Color="WhiteSmoke"></SolidColorBrush>
  <SolidColorBrush x:Key="SelectedSectionBrush"
                   Color="LightSlateGray"></SolidColorBrush>

  <Style TargetType="{x:Type DataGridRow}">
    <Style.Triggers>
      <Trigger Property="Validation.HasError"
               Value="true">
        <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},
                     Path=(Validation.Errors)[0].ErrorContent}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MainBorderStyle"
         TargetType="{x:Type Border}">
    <Setter Property="Background"
            Value="{StaticResource ResourceKey=WindowBackgroudBrush}" />
    <Setter Property="BorderBrush"
            Value="{StaticResource ResourceKey=WindowBackgroudBrush}" />
    <Setter Property="BorderThickness"
            Value="1" />
    <Setter Property="SnapsToDevicePixels"
            Value="True" />
  </Style>

  <Style x:Key="MainTabControlStyle"
         TargetType="{x:Type TabControl}">
    <Setter Property="Background"
            Value="{StaticResource ResourceKey=WindowBackgroudBrush}"></Setter>
  </Style>

  <Style x:Key="MainCCStyle"
         TargetType="{x:Type ContentControl}">
    <Setter Property="IsTabStop"
            Value="False" />
    <Setter Property="Background"
            Value="LightSlateGray" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <DockPanel>
            <ContentPresenter ContentSource="Content"
                              ContentTemplate="{TemplateBinding ContentTemplate}" />
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- 
  This template explains how to render a tab item with a close button.
  -->
  <DataTemplate x:Key="ClosableTabItemTemplate">
    <DockPanel Width="120">
      <Button Command="{Binding Path=Content.DataContext.CloseCommand, RelativeSource={RelativeSource AncestorType=TabItem}}"
              Content="X"
              Cursor="Hand"
              DockPanel.Dock="Right"
              Focusable="False"
              FontFamily="Courier"
              FontSize="9"
              FontWeight="Bold"
              Margin="0,1,0,0"
              Padding="0"
              VerticalContentAlignment="Bottom"
              Width="16"
              Height="16" />
      <ContentPresenter Content="{Binding Path=Content.DataContext.Title, RelativeSource={RelativeSource AncestorType=TabItem}}"
                        VerticalAlignment="Center" />
    </DockPanel>
  </DataTemplate>

  <Style x:Key="ClosableTabItemStyle"
         TargetType="{x:Type TabItem}">
    <Setter Property="HeaderTemplate"
            Value="{StaticResource ResourceKey=ClosableTabItemTemplate}" />
  </Style>

  <!--
     The following style and two hierarchical data templates define how the 
     various tree views are drawn
  -->
  <Style x:Key="StandardTreeViewItem"
         TargetType="{x:Type TreeViewItem}">
    <Setter Property="IsExpanded"
            Value="{Binding IsExpanded, Mode=TwoWay}" />
    <Setter Property="IsSelected"
            Value="{Binding IsSelected, Mode=TwoWay}" />
    <Setter Property="FontWeight"
            Value="Normal" />
    <Style.Triggers>
      <Trigger Property="IsSelected"
               Value="True">
        <Setter Property="FontWeight"
                Value="Bold" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <HierarchicalDataTemplate DataType="{x:Type bcvm:TreeNodeViewModel}"
                            ItemsSource="{Binding Children}">
    <TextBlock Text="{Binding Name}"></TextBlock>
  </HierarchicalDataTemplate>

  <HierarchicalDataTemplate DataType="{x:Type bcvm:ClickableTreeNodeViewModel}"
                            ItemsSource="{Binding Children}">
    <TextBlock>
      <Hyperlink Command="{Binding Path=ClickCommand}"
                 CommandParameter="{Binding Path=Parameter}"> 
        <TextBlock Text="{Binding Name}" />
      </Hyperlink>
    </TextBlock>
  </HierarchicalDataTemplate>

</ResourceDictionary>